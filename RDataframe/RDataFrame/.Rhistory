install_pyarrow()
library(arrow)
library(reticulate)
# 使用实例
# 假设 Arrow Flight 客户端已经被初始化
local_client <- flight_connect(port = 8815)
reticulate::py_last_error()
# library(R6)
library(reticulate)
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
reticulate::py_last_error()
reticulate::py_config()
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
reticulate::py_last_error()
reticulate::py_run_string("import pyarrow")
reticulate::py_install("pyarrow")
reticulate::py_install("pyarrow")
reticulate::py_run_string("import pyarrow")
reticulate::py_last_error()
reticulate::py_run_string("import pyarrow")
library(reticulate)
use_condaenv("SCI2DB_new", required = TRUE)
py_run_string("import pyarrow")
reticulate::py_last_error()
library(reticulate)
(python <- reticulate::py_discover_config()$python)
virtualenv_create("r-deltalake", python, packages = "deltalake")
use_virtualenv("r-deltalake")
use_virtualenv("r-deltalake")
use_virtualenv("r-deltalake")
library(reticulate)
use_virtualenv("r-deltalake")
py_run_string("import pyarrow as pa")
library(arrow)
install_pyarrow()
py_run_string("import pyarrow as pa")
py_run_string("import pyarrow as pa")
library(reticulate)
library(arrow)
py_run_string("import pyarrow as pa")
use_virtualenv("r-deltalake")
py_run_string("import pyarrow as pa")
py_config()
library(reticulate)
library(arrow)
py_run_string("import pyarrow as pa")
reticulate::py_last_error()
py_config()
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
py_config()
library(reticulate)
library(arrow)
use_python("C:\\Users\\Yomi\\.conda\\envs\\SCI2DB_new\\python.exe")
py_config()
py_run_string("import pyarrow")
reticulate::py_last_error()
use_virtualenv("r-deltalake")
virtualenv_create("r-deltalake", python, packages = "deltalake")
use_virtualenv("r-deltalake")
virtualenv_create("r-deltalake_2", python, packages = "deltalake")
use_virtualenv("r-deltalake_2")
# 清除当前的 Python 环境
reticulate::use_python(NULL)
# 清除当前的 Python 环境
reticulate::use_virtualenv(NULL)
# 清除当前的 Python 环境
reticulate::use_virtualenv()
# 清除当前的 Python 环境
reticulate::use_python()
py_config()
library(reticulate)
py_config()
library(reticulate)
reticulate::py_discover_config()
(python <- reticulate::py_discover_config()$python)
virtualenv_create("pa", python, packages = "pyarrow")
use_virtualenv("pa")
py_config()
use_python("C:\\Users\\Yomi\\.conda\\envs\\SCI2DB_new\\python.exe")
py_config()
use_python("C:/Users/Yomi/OneDrive - University of California/文档/.virtualenvs/pa/Scripts/python.exe")
library(reticulate)
use_virtualenv("pa")
py_config()
py_config()
library(reticulate)
use_virtualenv("pa")
py_config()
reticulate::py_discover_config()
py_config()
py_run_string("import pyarrow")
reticulate::use_condaenv("SCI2DB_new", required = TRUE)
Sys.setenv(RETICULATE_CONDA = "C:/ProgramData/anaconda3/condabin/conda.bat")
reticulate::use_condaenv("SCI2DB_new", required = TRUE)
py_config()
py_run_string("import pyarrow")
local_client <- flight_connect(port = 8815)
library(arrow)
local_client <- flight_connect(port = 8815)
flight_get(local_client, "pollution_data" )
reticulate::py_last_error()
View(local_client)
pa <- reticulate::import("pyarrow")
fl <- pa$flightf
fl <- pa$flight
action <- fl$Action("get_schema", iconv("images_test.txt", from = "", to = "UTF-8"))
iconv("images_test.txt", from = "", to = "UTF-8")
str <- iconv("images_test.txt", from = "", to = "UTF-8")
install.packages("stringi")
library(stringi)
stri_enc_toutf8(str = str)
stri_enc_toutf8(str <- str)
enc <- stri_enc_toutf8(str <- str)
charToRaw(str)
action <- fl$Action("get_schema", charToRaw(str))
local_client$do_action(action)
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/MyDataFrame.R")
# self$schema <- NULL
# self$data <- NULL
self$client <- Client$new()  # 设置 Arrow Flight client
Client <- R6Class(
"Client",
public = list(
# 初始化方法，设置 schema，data 和 client
initialize = function() {
self$client <- flight_connect(port = 8815)
},
# get_schema 方法，调用 client 的 get_schema
get_schema = function(dataset_id) {
if (is.null(self$client)) {
stop("Client is not initialized.")
}
# 调用 client 的 get_schema 方法（假设 Flight Client 提供该方法）
tryCatch({
schema <- self$client$get_schema(dataset_id)  # 假设这是正确的调用方式
self$schema <- schema  # 设置 schema
return(self$schema)
}, error = function(e) {
cat("Error in fetching schema:", e$message, "\n")
return(NULL)
})
},
concat = function(obj) {
self$data <- ifelse(!is.null(self$data),pa$concat_tables(c(self$data, obj)),obj)
},
flat_open = function(name) {
self$client$flat_open
},
open = function(name) {
self$client
},
)
)
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
View(QueueObject)
View(Queue)
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
source("C:/Users/Yomi/PycharmProjects/SDB2/RDataframe/RDataFrame/client.R")
